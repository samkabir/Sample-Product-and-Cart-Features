@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background-color: #f1f5f9;
}



.ribbon-button-container {
    display: inline-block; /* To make the container fit the button */
  }

  .ribbon-button {
    background: linear-gradient(to right, #ff8c00, #ff6347); /* Orange gradient */
    color: white;
    font-family: sans-serif; /* Or your preferred font */
    font-size: 14px; /* Adjust as needed */
    font-weight: bold;
    padding: 4px 15px 4px 15px; /* Adjust padding for desired height and width */
    border: none;
    border-radius: 3px;
    position: relative;
    display: flex;
    align-items: center;
    cursor: pointer;
    overflow: hidden; /* Hide anything outside the button's bounds */
    height: 25px; /* Explicit height */
    min-width: 154px; /* Explicit minimum width */
    box-sizing: border-box; /* Include padding and border in the element's total width and height */
  }

  .ribbon-button::after {
    content: '';
    position: absolute;
    right: -12px;
    top: 1%;
    transform: translateY(-50%) rotate(45deg);
    width: 25px;
    height: 25px; /* Size of the "cut" */
    background-color: white; /* Color of the triangle */
    transform-origin: bottom left; /* Adjust origin for correct rotation */
    border-top-right-radius: 2px; /* Slightly round the corner */
    box-shadow: -1px 1px 0px 0px rgba(0,0,0,0.1); /* Subtle shadow for depth */
    z-index: 1; /* Ensure it's above the button's background */
  }

  /* Adjustments for the dropdown arrow within the ribbon button */
  .ribbon-button svg.dropdown-arrow {
    width: 16px; /* Adjust size of the arrow */
    height: 16px;
    margin-left: 5px; /* Space between text and arrow */
    color: white; /* Color of the arrow */
    z-index: 2; /* Ensure arrow is above ribbon effect */
    position: relative; /* To be positioned correctly with text */
  }



  @keyframes fadeInFromUp {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInFromDown {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInFromRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-up {
  animation: fadeInFromUp 0.6s ease-out forwards;
}

.fade-in-down {
  animation: fadeInFromDown 0.6s ease-out forwards;
}

.fade-in-right {
  animation: fadeInFromRight 0.6s ease-out forwards;
}

.fade-in-left {
  animation: fadeInFromLeft 0.6s ease-out forwards;
}

/* Optional: To make the elements hidden before animation starts */
.fade-in-up,
.fade-in-down,
.fade-in-right,
.fade-in-left {
  opacity: 0;
}

input[type="checkbox"] {
  accent-color: #00B795;
}

.custom-checkbox-container .checkmark:after {
  left: 7px; /* Adjust checkmark position */
  top: 3px; /* Adjust checkmark position */
  width: 6px; /* Adjust checkmark size */
  height: 12px; /* Adjust checkmark size */
  border: solid white; /* THIS IS THE LINE TO ENSURE WHITE TICK MARK */
  border-width: 0 3px 3px 0; /* Creates the checkmark shape */
  transform: rotate(45deg); /* Rotates to form a checkmark */
}